"5c8ede82be32f676bc3661f7a1a4081a03616aba"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#4=[nil nil ((480 . 486) (#("    ],
" 0 4 (fontified t) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 6 (fontified t) 6 7 (fontified t)) . 480) (undo-tree-id150 . 1) (undo-tree-id151 . -7) (undo-tree-id152 . -7) (undo-tree-id153 . 2) (undo-tree-id154 . 2) (undo-tree-id155 . -5) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -7)) nil (23086 52828 300916 219000) 0 nil]) ((485 . 486)) nil (23086 52828 300919 907000) 0 nil]) ((#("  " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t)) . -342) (undo-tree-id159 . -2) (338 . 342) 340) nil (23086 52828 300924 324000) 0 nil]) ((nil rear-nonsticky nil 339 . 340) (#("
" 0 1 (fontified nil)) . -387) (337 . 388) 323) nil (23086 52828 300926 558000) 0 nil]) ((#("  passwordHash: { type: String, required: true },
" 0 2 (fontified t) 2 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 50 (fontified t)) . 439) (undo-tree-id160 . -50) (undo-tree-id161 . -50) (undo-tree-id162 . -2) (undo-tree-id163 . -2) 441) nil (23086 52828 300931 26000) 0 nil] [nil nil ((439 . 491) (#("  passwordHash: { type: String, required: true },
" 0 2 (fontified t) 2 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-2-face)) 17 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 50 (fontified t)) . 439) (undo-tree-id137 . -50) (undo-tree-id138 . -50) (undo-tree-id139 . 48) (undo-tree-id140 . 48) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -50)) ((439 . 489) (#("  (passwordHash: { type: String, required: true }),
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 43 (fontified t) 43 47 (fontified t face font-lock-constant-face) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-3-face)) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 52 (fontified t)) . 439) (undo-tree-id147 . -52) (undo-tree-id148 . -52) (undo-tree-id149 . -4) (t 23086 52788 487007 487000)) (23086 52788 467102 679000) 0 nil]) ((#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . 487) (undo-tree-id145 . 1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 441) (undo-tree-id146 . -1) 445 (t 23086 52586 366575 772000)) nil (23086 52801 362899 8000) 0 nil]) ((561 . 702) (#("UserSchema.virtual(\"password\")
  .set(function(value) {
    this.passwordHash = bcrypt.hashSync(value, 8); // the 8 here is the \"cost factor\"
  });
" 0 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face)) 19 29 (fontified t face font-lock-string-face) 29 30 (fontified t face (rainbow-delimiters-depth-1-face)) 30 37 (fontified t) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 52 (fontified t face font-lock-variable-name-face) 52 53 (fontified t face (rainbow-delimiters-depth-2-face)) 53 54 (fontified t) 54 55 (fontified t js--pstate (#1=(nil 1 function 599 t 706) #2=(nil -2305843009213693952 toplevel nil nil nil)) face (rainbow-delimiters-depth-2-face)) 55 60 (fontified t) 60 64 (fontified t face font-lock-constant-face) 64 95 (fontified t) 95 96 (fontified t face (rainbow-delimiters-depth-3-face)) 96 104 (fontified t) 104 105 (fontified t face (rainbow-delimiters-depth-3-face)) 105 107 (fontified t) 107 110 (fontified t face font-lock-comment-delimiter-face) 110 142 (fontified t face font-lock-comment-face) 142 144 (fontified t) 144 145 (fontified t js--pend #1# face (rainbow-delimiters-depth-2-face)) 145 146 (fontified t face (rainbow-delimiters-depth-1-face)) 146 147 (fontified t) 147 148 (fontified t)) . 561) (undo-tree-id116 . -147) (undo-tree-id117 . -31) (undo-tree-id118 . -31) (undo-tree-id119 . -56) (undo-tree-id120 . -56) (undo-tree-id121 . -142) (undo-tree-id122 . -142) (undo-tree-id123 . -148) (undo-tree-id124 . -148) (undo-tree-id125 . -148) (439 . 491) (#("    passwordHash: { type: String, required: true },
" 0 4 (fontified t) 4 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-2-face)) 19 44 (fontified t) 44 48 (fontified t face font-lock-constant-face) 48 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-2-face)) 50 51 (fontified t) 51 52 (fontified t)) . 439) (undo-tree-id126 . 1) (undo-tree-id127 . -49) (undo-tree-id128 . -49) (undo-tree-id129 . -52) (undo-tree-id130 . -52) (undo-tree-id131 . 2) (undo-tree-id132 . 2) (undo-tree-id133 . -50) (undo-tree-id134 . -50) (undo-tree-id135 . -50) (undo-tree-id136 . -52)) nil (23086 52586 335004 704000) 0 nil]) ((439 . 443) (485 . 486) (t 23086 52569 553486 359000)) nil (23086 52586 335009 211000) 0 nil]) ((439 . 485)) nil (23086 52569 501744 960000) 0 nil]) ((#("    " 0 4 (fontified t)) . -439) (undo-tree-id115 . -4) 443 (438 . 443) 437) nil (23086 52569 501751 434000) 0 nil] [nil nil ((438 . 557) 437) ((#("UserSchema.methods.validatePassword = function(password) {
  return bcrypt.compareSync(password, this.passwordHash);
};" 0 38 (fontified t) 38 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t face (rainbow-delimiters-depth-2-face)) 47 55 (fontified t face font-lock-variable-name-face) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 57 (fontified t) 57 58 (fontified t js--pstate (#3=(nil 1 function 476 t 556) #2#) face (rainbow-delimiters-depth-2-face)) 58 61 (fontified t) 61 67 (fontified t face font-lock-keyword-face) 67 86 (fontified t) 86 87 (fontified t face (rainbow-delimiters-depth-3-face)) 87 97 (fontified t) 97 101 (fontified t face font-lock-constant-face) 101 114 (fontified t) 114 115 (fontified t face (rainbow-delimiters-depth-3-face)) 115 117 (fontified t) 117 118 (fontified t face (rainbow-delimiters-depth-2-face) js--pend #3#) 118 119 (fontified t)) . 438) (undo-tree-id109 . -118) (undo-tree-id110 . -118) (undo-tree-id111 . -117) (undo-tree-id112 . -117) (undo-tree-id113 . -59) (undo-tree-id114 . -59)) (23086 52557 180654 885000) 0 nil]) ((658 . 777)) nil (23086 52557 180966 234000) 0 nil]) ((657 . 658) (656 . 657) 655) nil (23086 52557 180682 99000) 0 nil]) ((509 . 656)) nil (23086 52557 180689 705000) 0 nil] [nil nil ((nil rear-nonsticky nil 509 . 510) (#("
" 0 1 (fontified nil)) . -510) (509 . 511)) ((#("

" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil)) . 509) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (510 . 511) (nil rear-nonsticky t 509 . 510)) (23086 52436 174957 342000) 0 nil]) ((#("
" 0 1 (fontified t)) . 472) (undo-tree-id69 . 1)) nil (23086 52436 175195 978000) 0 nil]) ((#("p
" 0 1 (fontified t) 1 2 (fontified t)) . 472) (undo-tree-id70 . 1) (undo-tree-id71 . -2) (undo-tree-id72 . -2)) nil (23086 52436 174982 661000) 0 nil]) ((472 . 473) (471 . 472) (470 . 471) 469) nil (23086 52436 174987 315000) 0 nil]) ((#("o" 0 1 (fontified t)) . -470) (undo-tree-id73 . -1) 471 (470 . 471) (507 . 509) (506 . 507)) nil (23086 52436 174993 528000) 0 nil]) ((489 . 506) 488) nil (23086 52436 174996 995000) 0 nil]) ((#("." 0 1 (fontified t)) . -489) (undo-tree-id74 . -1) (#("u" 0 1 (fontified t)) . -490) (undo-tree-id75 . -1) (#("n" 0 1 (fontified t)) . -491) (undo-tree-id76 . -1) (#("i" 0 1 (fontified t)) . -492) (undo-tree-id77 . -1) (#("q" 0 1 (fontified t)) . -493) (undo-tree-id78 . -1) (#("u" 0 1 (fontified t)) . -494) (undo-tree-id79 . -1) (#("e" 0 1 (fontified t)) . -495) (undo-tree-id80 . -1) (#("V" 0 1 (fontified t)) . -496) (undo-tree-id81 . -1) (#("a" 0 1 (fontified t)) . -497) (undo-tree-id82 . -1) (#("l" 0 1 (fontified t)) . -498) (undo-tree-id83 . -1) (#("i" 0 1 (fontified t)) . -499) (undo-tree-id84 . -1) (#("d" 0 1 (fontified t)) . -500) (undo-tree-id85 . -1) (#("a" 0 1 (fontified t)) . -501) (undo-tree-id86 . -1) (#("t" 0 1 (fontified t)) . -502) (undo-tree-id87 . -1) (#("o" 0 1 (fontified t)) . -503) (undo-tree-id88 . -1) (#("r" 0 1 (fontified t)) . -504) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -505) (undo-tree-id90 . -1) (#("=" 0 1 (fontified t)) . -506) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -507) (undo-tree-id92 . -1) 508 (506 . 508) (#("-" 0 1 (fontified t)) . -506) (undo-tree-id93 . -1) (#("=" 0 1 (fontified t)) . -507) (undo-tree-id94 . -1) (#(" " 0 1 (fontified t)) . -508) (undo-tree-id95 . -1) 509 (496 . 509) (494 . 496) (484 . 494) (#("r" 0 1 (fontified t)) . -484) (undo-tree-id96 . -1) (#("o" 0 1 (fontified t)) . -485) (undo-tree-id97 . -1) (#("g" 0 1 (fontified t)) . -486) (undo-tree-id98 . -1) 487 (476 . 487) (472 . 476) (#("u" 0 1 (fontified t)) . -472) (undo-tree-id99 . -1) (#("s" 0 1 (fontified t)) . -473) (undo-tree-id100 . -1) (#("e" 0 1 (fontified t)) . -474) (undo-tree-id101 . -1) (#("r" 0 1 (fontified t)) . -475) (undo-tree-id102 . -1) 476 (472 . 476) (471 . 472) (470 . 471) (t 23086 52334 53625 117000) 468) nil (23086 52436 175061 996000) 0 nil]) ((235 . 319) (#("      username: {type: String,
		 required: true,
		 unique: true},
" 0 16 (fontified t) 16 17 (fontified t face (rainbow-delimiters-depth-3-face)) 17 23 (fontified t) 23 30 (fontified t) 30 31 (fontified t) 31 44 (fontified t) 44 48 (fontified t face font-lock-constant-face) 48 50 (fontified t) 50 61 (fontified t) 61 65 (fontified t face font-lock-constant-face) 65 66 (fontified t face (rainbow-delimiters-depth-3-face)) 66 67 (fontified t) 67 68 (fontified t)) . 235) (undo-tree-id49 . -68) (undo-tree-id50 . -68) (undo-tree-id51 . 1) (undo-tree-id52 . -31) (undo-tree-id53 . -31) (undo-tree-id54 . -50) (undo-tree-id55 . -50) (undo-tree-id56 . 19) (undo-tree-id57 . 2) (undo-tree-id58 . 2) (undo-tree-id59 . -66) (undo-tree-id60 . -66) (undo-tree-id61 . -66) (undo-tree-id62 . -68)) nil (23086 52334 10167 882000) 0 nil]) ((294 . 302) (#("," 0 1 (fontified t)) . -294) (undo-tree-id63 . -1) 295 (288 . 295) (284 . 288) (278 . 284) (269 . 278) (#("u" 0 1 (fontified t)) . -269) (undo-tree-id64 . -1) (#("n" 0 1 (fontified t)) . -270) (undo-tree-id65 . -1) (#("i" 0 1 (fontified t)) . -271) (undo-tree-id66 . -1) (#("q" 0 1 (fontified t)) . -272) (undo-tree-id67 . -1) (#("u" 0 1 (fontified t)) . -273) (undo-tree-id68 . -1) 274 (269 . 274) (265 . 269) 257) nil (23086 52334 10179 469000) 0 nil]) ((252 . 258) (239 . 241) (249 . 250) (t 23086 52289 140968 245000)) nil (23086 52334 10183 71000) 0 nil]) ((410 . 457) (#("
var User = mongoose.model('User', UserSchema);
" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 9 (fontified t face font-lock-variable-name-face) 9 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t face font-lock-string-face) 28 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 45 (fontified t) 45 46 (fontified t face (rainbow-delimiters-depth-1-face)) 46 48 (fontified t)) . 410) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -48) (undo-tree-id3 . -48) (undo-tree-id4 . -48) (164 . 409) (#("var UserSchema = new Schema({
  fname: String,
  lname: String,
  username: String,
  email: String,
  secrets: [{
    type: Schema.Types.ObjectId,
    ref: \"Secret\"
  }]
}, {
  timestamps: true
});
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 14 (fontified t face font-lock-variable-name-face) 14 17 (fontified t) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 112 (fontified t) 112 113 (fontified t face (rainbow-delimiters-depth-3-face)) 113 114 (fontified t face (rainbow-delimiters-depth-4-face)) 114 157 (fontified t) 157 165 (fontified t face font-lock-string-face) 165 168 (fontified t) 168 169 (fontified t face (rainbow-delimiters-depth-4-face)) 169 170 (fontified t face (rainbow-delimiters-depth-3-face)) 170 171 (fontified t) 171 172 (fontified t face (rainbow-delimiters-depth-2-face)) 172 174 (fontified t) 174 175 (fontified t face (rainbow-delimiters-depth-2-face)) 175 190 (fontified t) 190 194 (fontified t face font-lock-constant-face) 194 195 (fontified t) 195 196 (fontified t face (rainbow-delimiters-depth-2-face)) 196 197 (fontified t face (rainbow-delimiters-depth-1-face)) 197 199 (fontified t)) . 164) (undo-tree-id5 . -30) (undo-tree-id6 . -30) (undo-tree-id7 . -47) (undo-tree-id8 . -47) (undo-tree-id9 . -64) (undo-tree-id10 . -64) (undo-tree-id11 . -84) (undo-tree-id12 . -84) (undo-tree-id13 . -101) (undo-tree-id14 . -101) (undo-tree-id15 . -115) (undo-tree-id16 . -115) (undo-tree-id17 . -148) (undo-tree-id18 . -148) (undo-tree-id19 . -166) (undo-tree-id20 . -166) (undo-tree-id21 . -171) (undo-tree-id22 . -171) (undo-tree-id23 . -176) (undo-tree-id24 . -176) (undo-tree-id25 . -195) (undo-tree-id26 . -195) (undo-tree-id27 . -199) (undo-tree-id28 . -199) (undo-tree-id29 . -199) (undo-tree-id30 . -199) (undo-tree-id31 . -199) (undo-tree-id32 . -199) (undo-tree-id33 . -199) (undo-tree-id34 . -199) (undo-tree-id35 . -199) (67 . 163) (#("const bcrypt = require('bcrypt');
const uniqueValidator = require('mongoose-unique-validator');
" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 12 (fontified t face font-lock-variable-name-face) 12 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 31 (fontified t face font-lock-string-face) 31 32 (fontified t face (rainbow-delimiters-depth-1-face)) 32 34 (fontified t) 34 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 55 (fontified t face font-lock-variable-name-face) 55 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-1-face)) 66 93 (fontified t face font-lock-string-face) 93 94 (fontified t face (rainbow-delimiters-depth-1-face)) 94 95 (fontified t) 95 96 (fontified t)) . 67) (undo-tree-id36 . -96) (undo-tree-id37 . -96) (undo-tree-id38 . -34) (undo-tree-id39 . -34) (undo-tree-id40 . 20) (undo-tree-id41 . -75) (undo-tree-id42 . -75) (undo-tree-id43 . -75) (undo-tree-id44 . -96) (1 . 37) (#("var mongoose = require('mongoose');
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-variable-name-face) 12 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 33 (fontified t face font-lock-string-face) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 36 (fontified t)) . 1) (undo-tree-id45 . -36) (undo-tree-id46 . -36) (undo-tree-id47 . -36)) nil (23086 52289 92825 735000) 0 nil]) ((134 . 143)) nil (23086 52289 92830 984000) 0 nil]) ((152 . 153)) nil (23086 52289 92832 215000) 0 nil]) ((135 . 152) (122 . 135) (101 . 122) (100 . 101) (92 . 100) (#("q" 0 1 (fontified t face font-lock-string-face)) . -92) (undo-tree-id48 . -1) 93 (88 . 93) (67 . 88) (67 . 68) (t 23086 52197 595698 371000)) nil (23086 52289 92835 849000) 0 nil]) nil nil (23086 52289 92837 108000) 0 nil] #4# 3465 29 nil]