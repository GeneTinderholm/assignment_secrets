"4a849fa39d23903e2df9115e4dcc29e9ec577cad"
[cl-struct-undo-tree [nil ([nil (#1=[nil nil ((303 . 356) (#("var Secret = mongoose.model('Secret', SecretSchema);
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-variable-name-face) 10 27 (fontified t) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 36 (fontified t face font-lock-string-face) 36 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-1-face)) 51 53 (fontified t)) . 303) (undo-tree-id0 . -53) (undo-tree-id1 . -53) (undo-tree-id2 . 43) (undo-tree-id3 . 44) (undo-tree-id4 . 44) (undo-tree-id5 . -9) (undo-tree-id6 . -9) (undo-tree-id7 . -9) (undo-tree-id8 . -53) (68 . 302) (#("var SecretSchema = new Schema({
  body: String,
  usersRequesting: [{
    type: Schema.Types.ObjectId,
    ref: \"User\"
  }],
  userSubmitted: Schema.Types.ObjectId
}, {
  timestamps: true
});
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 16 (fontified t face font-lock-variable-name-face) 16 19 (fontified t) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 29 (fontified t face font-lock-type-face) 29 30 (fontified t face (rainbow-delimiters-depth-1-face)) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 67 (fontified t) 67 68 (fontified t face (rainbow-delimiters-depth-3-face)) 68 69 (fontified t face (rainbow-delimiters-depth-4-face)) 69 112 (fontified t) 112 118 (fontified t face font-lock-string-face) 118 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-4-face)) 122 123 (fontified t face (rainbow-delimiters-depth-3-face)) 123 164 (fontified t) 164 165 (fontified t face (rainbow-delimiters-depth-2-face)) 165 167 (fontified t) 167 168 (fontified t face (rainbow-delimiters-depth-2-face)) 168 183 (fontified t) 183 187 (fontified t face font-lock-constant-face) 187 188 (fontified t) 188 189 (fontified t face (rainbow-delimiters-depth-2-face)) 189 190 (fontified t face (rainbow-delimiters-depth-1-face)) 190 192 (fontified t)) . 68) (undo-tree-id9 . -32) (undo-tree-id10 . -32) (undo-tree-id11 . -48) (undo-tree-id12 . -48) (undo-tree-id13 . -70) (undo-tree-id14 . -70) (undo-tree-id15 . -103) (undo-tree-id16 . -103) (undo-tree-id17 . -119) (undo-tree-id18 . -119) (undo-tree-id19 . -125) (undo-tree-id20 . -125) (undo-tree-id21 . -164) (undo-tree-id22 . -164) (undo-tree-id23 . -169) (undo-tree-id24 . -169) (undo-tree-id25 . -188) (undo-tree-id26 . -188) (undo-tree-id27 . -192) (undo-tree-id28 . -192) (undo-tree-id29 . -192) (1 . 37) (#("var mongoose = require('mongoose');
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-variable-name-face) 12 22 (fontified t) 22 23 (fontified t face (rainbow-delimiters-depth-1-face)) 23 33 (fontified t face font-lock-string-face) 33 34 (fontified t face (rainbow-delimiters-depth-1-face)) 34 36 (fontified t)) . 1) (undo-tree-id30 . -36) (undo-tree-id31 . -36) (undo-tree-id32 . -36)) nil (23086 53261 220383 169000) 0 nil]) ((265 . 271) (#("User" 0 4 (fontified t face font-lock-variable-name-face)) . 265) (t 23086 52197 595698 371000)) nil (23086 53261 220388 3000) 0 nil]) nil nil (23086 53261 220389 151000) 0 nil] #1# 621 2 nil]