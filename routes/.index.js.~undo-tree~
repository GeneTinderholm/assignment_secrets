"f645c92c685c607cd0e2e4b114b93b50107b7f79"
[cl-struct-undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#1=[nil nil ((942 . 989) (#("    await User.findByIdAndUpdate(user.id, user);
" 0 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-3-face)) 33 40 (fontified t) 40 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-3-face)) 47 49 (fontified t)) . 942) (undo-tree-id145 . -49) (undo-tree-id146 . -49) (undo-tree-id147 . 2) (undo-tree-id148 . -42) (undo-tree-id149 . 2) (undo-tree-id150 . -42) (undo-tree-id151 . -42) (undo-tree-id152 . -42) (undo-tree-id153 . -42) (undo-tree-id154 . -47) (undo-tree-id155 . -47) (undo-tree-id156 . -49)) nil (23087 8844 303724 2000) 0 nil]) ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . 989) (undo-tree-id157 . 1) (undo-tree-id158 . 1) (undo-tree-id159 . 1) (undo-tree-id160 . -1)) nil (23087 8844 303729 792000) 0 nil]) ((944 . 946) (982 . 987)) nil (23087 8844 303731 682000) 0 nil]) ((#("{ $set: { secrets: user.secrets } }" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-5-face)) 9 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-5-face)) 33 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-4-face))) . 982) (undo-tree-id161 . -34) (undo-tree-id162 . -34) (undo-tree-id163 . 35) (undo-tree-id164 . -1) (undo-tree-id165 . 1) (undo-tree-id166 . -35) (undo-tree-id167 . -34) (undo-tree-id168 . -34)) nil (23087 8844 303739 199000) 0 nil]) ((#(" " 0 1 (fontified t)) . -980) (undo-tree-id169 . -1) (#("}" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -981) (undo-tree-id170 . -1) (undo-tree-id171 . 1) (undo-tree-id172 . -1) 982 (#("{" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -973) (undo-tree-id173 . -1) (#(" " 0 1 (fontified t)) . -974) (undo-tree-id174 . -1) (#("_" 0 1 (fontified t)) . -975) (undo-tree-id175 . -1) (#("i" 0 1 (fontified t)) . -976) (undo-tree-id176 . -1) (#("d" 0 1 (fontified t)) . -977) (undo-tree-id177 . -1) (#(":" 0 1 (fontified t)) . -978) (undo-tree-id178 . -1) (#(" " 0 1 (fontified t)) . -979) (undo-tree-id179 . -1) 980 (955 . 972) (#("update" 0 6 (fontified t)) . 955) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) 960 (t 23087 8569 501358 544000)) nil (23087 8844 303755 585000) 0 nil]) ((719 . 761) (#("    let user = await User.findById(userId);
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 34 (fontified t) 34 35 (fontified t face (rainbow-delimiters-depth-3-face)) 35 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-3-face)) 42 44 (fontified t)) . 719) (undo-tree-id121 . -44) (undo-tree-id122 . -44) (undo-tree-id123 . 2) (undo-tree-id124 . -20) (undo-tree-id125 . -20) (undo-tree-id126 . 2) (undo-tree-id127 . -20) (undo-tree-id128 . -20) (undo-tree-id129 . 3) (undo-tree-id130 . 3) (undo-tree-id131 . -41) (undo-tree-id132 . -41) (undo-tree-id133 . -41) (undo-tree-id134 . -44)) nil (23087 8569 478559 793000) 0 nil]) ((760 . 761) (754 . 760) (721 . 723) (737 . 752) (#(" User.find({ id: userId })[0]" 0 10 (fontified t) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 12 (fontified t face (rainbow-delimiters-depth-4-face)) 12 24 (fontified t) 24 25 (fontified t face (rainbow-delimiters-depth-4-face)) 25 26 (fontified t face (rainbow-delimiters-depth-3-face)) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-3-face))) . 737) (undo-tree-id135 . -28) (undo-tree-id136 . -28) (undo-tree-id137 . -28) (undo-tree-id138 . -28) (undo-tree-id139 . -28) (undo-tree-id140 . -29) (undo-tree-id141 . 1) (undo-tree-id142 . -29) (undo-tree-id143 . 3) (undo-tree-id144 . -27) 765 (t 23087 8478 382871 92000)) nil (23087 8569 478570 213000) 0 nil]) ((763 . 766) (t 23087 8391 957350 960000)) nil (23087 8478 336626 809000) 0 nil]) ((836 . 884) (#("    console.log(secret, userId, user, secretObj);
" 0 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-3-face)) 16 47 (fontified t) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 49 (fontified t) 49 50 (fontified t)) . 836) (undo-tree-id112 . 1) (undo-tree-id113 . -50) (undo-tree-id114 . -50) (undo-tree-id115 . 2) (undo-tree-id116 . 2) (undo-tree-id117 . -48) (undo-tree-id118 . -48) (undo-tree-id119 . -48) (undo-tree-id120 . -50)) nil (23087 8391 928929 227000) 0 nil]) ((868 . 885) (860 . 868) (840 . 860) (835 . 840) (t 23087 8221 86188 819000) 767) nil (23087 8391 928933 792000) 0 nil]) ((601 . 995) (#("router.post('/', async (req, res, next) => {
    let secret = req.body.secret || '';
    let userId = req.session.userId;
    let user = await User.find({id: userId});
    let secretObj = new Secret({body: secret, userSubmitted: userId});
    user.secrets.push(secretObj._id);
    await secretObj.save();
    await User.update({_id: user.id}, {$set: {secrets: user.secrets}});
    res.redirect('/');
" 0 11 (fontified t) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 15 (fontified t face font-lock-string-face) 15 16 (fontified t) 16 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 43 (fontified t) 43 44 (fontified t face (rainbow-delimiters-depth-2-face)) 44 45 (fontified t) 45 49 (fontified t) 49 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 59 (fontified t face font-lock-variable-name-face) 59 81 (fontified t) 81 83 (fontified t face font-lock-string-face) 83 85 (fontified t) 85 89 (fontified t) 89 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 99 (fontified t face font-lock-variable-name-face) 99 122 (fontified t) 122 126 (fontified t) 126 129 (fontified t face font-lock-keyword-face) 129 130 (fontified t) 130 134 (fontified t face font-lock-variable-name-face) 134 152 (fontified t) 152 153 (fontified t face (rainbow-delimiters-depth-3-face)) 153 154 (fontified t face (rainbow-delimiters-depth-4-face)) 154 164 (fontified t) 164 165 (fontified t face (rainbow-delimiters-depth-4-face)) 165 166 (fontified t face (rainbow-delimiters-depth-3-face)) 166 167 (fontified t) 167 168 (fontified t) 168 172 (fontified t) 172 175 (fontified t face font-lock-keyword-face) 175 176 (fontified t) 176 185 (fontified t face font-lock-variable-name-face) 185 188 (fontified t) 188 191 (fontified t face font-lock-keyword-face) 191 192 (fontified t) 192 198 (fontified t face font-lock-type-face) 198 199 (fontified t face (rainbow-delimiters-depth-3-face)) 199 200 (fontified t face (rainbow-delimiters-depth-4-face)) 200 235 (fontified t) 235 236 (fontified t face (rainbow-delimiters-depth-4-face)) 236 237 (fontified t face (rainbow-delimiters-depth-3-face)) 237 238 (fontified t) 238 239 (fontified t) 239 260 (fontified t) 260 261 (fontified t face (rainbow-delimiters-depth-3-face)) 261 274 (fontified t) 274 275 (fontified t face (rainbow-delimiters-depth-3-face)) 275 276 (fontified t) 276 277 (fontified t) 277 301 (fontified t) 301 302 (fontified t face (rainbow-delimiters-depth-3-face)) 302 303 (fontified t face (rainbow-delimiters-depth-3-face)) 303 304 (fontified t) 304 305 (fontified t) 305 326 (fontified t) 326 327 (fontified t face (rainbow-delimiters-depth-3-face)) 327 328 (fontified t face (rainbow-delimiters-depth-4-face)) 328 340 (fontified t) 340 341 (fontified t face (rainbow-delimiters-depth-4-face)) 341 343 (fontified t) 343 344 (fontified t face (rainbow-delimiters-depth-4-face)) 344 350 (fontified t) 350 351 (fontified t face (rainbow-delimiters-depth-5-face)) 351 372 (fontified t) 372 373 (fontified t face (rainbow-delimiters-depth-5-face)) 373 374 (fontified t face (rainbow-delimiters-depth-4-face)) 374 375 (fontified t face (rainbow-delimiters-depth-3-face)) 375 376 (fontified t) 376 377 (fontified t) 377 393 (fontified t) 393 394 (fontified t face (rainbow-delimiters-depth-3-face)) 394 397 (fontified t face font-lock-string-face) 397 398 (fontified t face (rainbow-delimiters-depth-3-face)) 398 399 (fontified t) 399 400 (fontified t)) . 601) (undo-tree-id82 . -305) (undo-tree-id83 . -305) (undo-tree-id84 . -239) (undo-tree-id85 . -239) (undo-tree-id86 . -377) (undo-tree-id87 . -377) (undo-tree-id88 . -45) (undo-tree-id89 . -45) (undo-tree-id90 . 384) (undo-tree-id91 . -85) (undo-tree-id92 . -85) (undo-tree-id93 . -122) (undo-tree-id94 . -122) (undo-tree-id95 . -226) (undo-tree-id96 . -226) (undo-tree-id97 . -226) (undo-tree-id98 . -226) (undo-tree-id99 . -226) (undo-tree-id100 . -277) (undo-tree-id101 . -277) (undo-tree-id102 . -168) (undo-tree-id103 . -168) (undo-tree-id104 . -400) (undo-tree-id105 . -400) (undo-tree-id106 . 385) (undo-tree-id107 . 385) (undo-tree-id108 . -15) (undo-tree-id109 . -15) (undo-tree-id110 . -15) (undo-tree-id111 . -400)) nil (23087 8221 54918 469000) 0 nil]) ((616 . 617) (t 23087 8198 293143 863000)) nil (23087 8221 54922 601000) 0 nil]) ((987 . 999) (#("n" 0 1 (fontified t)) . -987) (undo-tree-id0 . -1) (#("d" 0 1 (fontified t)) . -988) (undo-tree-id1 . -1) 989 (988 . 989) (#("d" 0 1 (fontified t)) . -988) (undo-tree-id2 . -1) (#("e" 0 1 (fontified t)) . -989) (undo-tree-id3 . -1) (#("r" 0 1 (fontified t)) . -990) (undo-tree-id4 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -991) (undo-tree-id5 . -1) 992 (981 . 992) (977 . 981) (977 . 978) 979) nil (23087 8198 272875 117000) 0 nil]) ((#("
" 0 1 (fontified t)) . -980) (undo-tree-id6 . -1) 981 (980 . 981) 979) nil (23087 8198 272880 899000) 0 nil]) ((914 . 915)) nil (23087 8198 272882 412000) 0 nil]) ((909 . 914)) nil (23087 8198 272883 310000) 0 nil]) (969) nil (23087 8198 272884 109000) 0 nil]) ((967 . 970) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -967) (undo-tree-id7 . -1) (undo-tree-id8 . 1) (undo-tree-id9 . -1) 968 (967 . 968) (#("}" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -967) (undo-tree-id10 . -1) (undo-tree-id11 . 1) (undo-tree-id12 . -1) 968 (966 . 968) (#("]" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -966) (undo-tree-id13 . -1) (undo-tree-id14 . 1) (undo-tree-id15 . -1) 967 (962 . 967) (945 . 962) (938 . 945) (#("s" 0 1 (fontified t)) . -938) (undo-tree-id16 . -1) (#("e" 0 1 (fontified t)) . -939) (undo-tree-id17 . -1) 940) nil (23087 8198 272894 261000) 0 nil]) ((870 . 876) (#("." 0 1 (fontified t)) . -870) (undo-tree-id18 . -1) (#("p" 0 1 (fontified t)) . -871) (undo-tree-id19 . -1) (#("u" 0 1 (fontified t)) . -872) (undo-tree-id20 . -1) 873 (871 . 873) (861 . 871) (#("u" 0 1 (fontified t)) . -861) (undo-tree-id21 . -1) (#("s" 0 1 (fontified t)) . -862) (undo-tree-id22 . -1) (#("e" 0 1 (fontified t)) . -863) (undo-tree-id23 . -1) (#("r" 0 1 (fontified t)) . -864) (undo-tree-id24 . -1) 865 (846 . 865) (843 . 846) (838 . 843) 812) nil (23087 8198 272903 987000) 0 nil]) ((#("
" 0 1 (fontified t)) . -767) (undo-tree-id25 . -1) (#(" " 0 1 (fontified t)) . -768) (undo-tree-id26 . -1) (#(" " 0 1 (fontified t)) . -769) (undo-tree-id27 . -1) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id28 . -1) (#(" " 0 1 (fontified t)) . -771) (undo-tree-id29 . -1) (#("u" 0 1 (fontified t)) . -772) (undo-tree-id30 . -1) (#("s" 0 1 (fontified t)) . -773) (undo-tree-id31 . -1) (#("e" 0 1 (fontified t)) . -774) (undo-tree-id32 . -1) 775 (#("r" 0 1 (fontified t)) . -775) (undo-tree-id33 . -1) (#("." 0 1 (fontified t)) . -776) (undo-tree-id34 . -1) (#("s" 0 1 (fontified t)) . -777) (undo-tree-id35 . -1) (#("e" 0 1 (fontified t)) . -778) (undo-tree-id36 . -1) (#("c" 0 1 (fontified t)) . -779) (undo-tree-id37 . -1) (#("r" 0 1 (fontified t)) . -780) (undo-tree-id38 . -1) (#("e" 0 1 (fontified t)) . -781) (undo-tree-id39 . -1) (#("t" 0 1 (fontified t)) . -782) (undo-tree-id40 . -1) (#("s" 0 1 (fontified t)) . -783) (undo-tree-id41 . -1) (#("." 0 1 (fontified t)) . -784) (undo-tree-id42 . -1) (#("p" 0 1 (fontified t)) . -785) (undo-tree-id43 . -1) (#("u" 0 1 (fontified t)) . -786) (undo-tree-id44 . -1) (#("s" 0 1 (fontified t)) . -787) (undo-tree-id45 . -1) (#("h" 0 1 (fontified t)) . -788) (undo-tree-id46 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -789) (undo-tree-id47 . -1) (#("s" 0 1 (fontified t)) . -790) (undo-tree-id48 . -1) (#("e" 0 1 (fontified t)) . -791) (undo-tree-id49 . -1) (#("c" 0 1 (fontified t)) . -792) (undo-tree-id50 . -1) (#("r" 0 1 (fontified t)) . -793) (undo-tree-id51 . -1) (#("e" 0 1 (fontified t)) . -794) (undo-tree-id52 . -1) (#("t" 0 1 (fontified t)) . -795) (undo-tree-id53 . -1) 796 (792 . 796) (772 . 792) (767 . 772) 756) nil (23087 8198 272930 286000) 0 nil]) ((892 . 902) (#("r" 0 1 (fontified t)) . -892) (undo-tree-id54 . -1) (#("I" 0 1 (fontified t)) . -893) (undo-tree-id55 . -1) (#("d" 0 1 (fontified t)) . -894) (undo-tree-id56 . -1) 895 (893 . 895) (892 . 893) (871 . 892) (866 . 871) 848) nil (23087 8198 272940 945000) 0 nil]) ((848 . 849) (843 . 848)) nil (23087 8198 272942 857000) 0 nil]) (859) nil (23087 8198 272944 99000) 0 nil]) ((843 . 860) (838 . 843) 837) nil (23087 8198 272945 179000) 0 nil]) ((835 . 838) (#(";" 0 1 (fontified t)) . -835) (undo-tree-id57 . -1) 836 (829 . 836) (827 . 829)) nil (23087 8198 272947 487000) 0 nil]) ((814 . 827) (799 . 814) (#("b" 0 1 (fontified t)) . -799) (undo-tree-id58 . -1) (#("o" 0 1 (fontified t)) . -800) (undo-tree-id59 . -1) (#("d" 0 1 (fontified t)) . -801) (undo-tree-id60 . -1) (#("y" 0 1 (fontified t)) . -802) (undo-tree-id61 . -1) (#(":" 0 1 (fontified t)) . -803) (undo-tree-id62 . -1) 804 (799 . 804) (795 . 799) (774 . 795) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -774) (undo-tree-id63 . -1) 775 (772 . 775) (767 . 772) 742) nil (23087 8198 272954 758000) 0 nil]) ((737 . 743)) nil (23087 8198 272957 39000) 0 nil]) ((748 . 761) (747 . 748) (726 . 747) (721 . 726) (713 . 721) (710 . 713) (689 . 710) (#("i" 0 1 (fontified t)) . -689) (undo-tree-id64 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -690) (undo-tree-id65 . -1) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -691) (undo-tree-id66 . -1) (#("s" 0 1 (fontified t)) . -692) (undo-tree-id67 . -1) (#("e" 0 1 (fontified t)) . -693) (undo-tree-id68 . -1) (#("c" 0 1 (fontified t)) . -694) (undo-tree-id69 . -1) (#("r" 0 1 (fontified t)) . -695) (undo-tree-id70 . -1) (#("e" 0 1 (fontified t)) . -696) (undo-tree-id71 . -1) (#("t" 0 1 (fontified t)) . -697) (undo-tree-id72 . -1) 698 (691 . 698) (#(" " 0 1 (fontified t)) . -691) (undo-tree-id73 . -1) 692 (689 . 692) (684 . 689) (678 . 684) (677 . 678) (#(";" 0 1 (fontified t)) . -677) (undo-tree-id74 . -1) 678 (677 . 678) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -677) (undo-tree-id75 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -678) (undo-tree-id76 . -1) (undo-tree-id77 . 1) (undo-tree-id78 . -1) 679 (662 . 679) (659 . 662) (#(" " 0 1 (fontified t)) . -659) (undo-tree-id79 . -1) 660 (649 . 660) (645 . 649) (645 . 646) 647) nil (23087 8198 272976 209000) 0 nil]) ((646 . 648) (#("    " 0 4 (fontified nil)) . -645) (undo-tree-id80 . -4) (649 . 650) (644 . 649) (628 . 644) (622 . 628) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -622) (undo-tree-id81 . -1) 623 (622 . 623) (601 . 622) (600 . 601) (599 . 600) (t 23087 7193 831807 102000) 596) nil (23087 8198 272984 669000) 0 nil]) nil nil (23087 8198 272985 929000) 0 nil] #1# 3940 29 nil]